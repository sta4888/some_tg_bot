import datetime
import re

import telebot
from sqlalchemy import distinct
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
from telegram_bot_calendar import DetailedTelegramCalendar, LSTEP
from dotenv import load_dotenv
import os

from connect import session
from models import Location, Offer
from service import find_offers

load_dotenv()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
API_TOKEN = os.environ.get('BOT_TOKEN')
bot = telebot.TeleBot(API_TOKEN)

user_data = {}

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏ –∏ –º–µ—Å—è—Ü–µ–≤ –Ω–∞ —Ä—É—Å—Å–∫–æ–º
days_of_week = ['–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±', '–í—Å']
months_of_year = [
    '–Ø–Ω–≤–∞—Ä—å', '–§–µ–≤—Ä–∞–ª—å', '–ú–∞—Ä—Ç', '–ê–ø—Ä–µ–ª—å', '–ú–∞–π', '–ò—é–Ω—å',
    '–ò—é–ª—å', '–ê–≤–≥—É—Å—Ç', '–°–µ–Ω—Ç—è–±—Ä—å', '–û–∫—Ç—è–±—Ä—å', '–ù–æ—è–±—Ä—å', '–î–µ–∫–∞–±—Ä—å'
]


@bot.message_handler(commands=['start'])
def start(message):
    bot.send_message(message.chat.id, """–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! üëã–≠—Ç–æ –í–ì–û–°–¢–ò–±–æ—Ç. 

–Ø –Ω–∞–π–¥—É –¥–ª—è –í–∞—Å –∫–≤–∞—Ä—Ç–∏—Ä—É –∏–ª–∏ –∞–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç—ã. üè†

–ù–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –≥–æ—Ä–æ–¥, ‚úàÔ∏è–¥–∞—Ç—ã –∑–∞–µ–∑–¥–∞ –∏ –≤—ã–µ–∑–¥–∞üöò,  –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Å—Ç–µ–πüõçüõçüõç –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑–¥–µ–ª—å–Ω—ã—Ö —Å–ø–∞–ª—å–Ω—ã—Ö –º–µ—Å—Ç. üò¥

–ü–æ—Å–º–æ—Ç—Ä–∏–º,üßë‚Äçüíª —á—Ç–æ —É –º–µ–Ω—è –¥–ª—è –í–∞—Å –µ—Å—Ç—å?""")
    user_data[message.chat.id] = {}
    bot.register_next_step_handler(message, ask_city)


def ask_city(message):
    user_data[message.chat.id]['city'] = message.text
    ask_start_date(message)


def ask_start_date(message):
    calendar, step = DetailedTelegramCalendar(min_date=datetime.date.today(), locale='ru').build()
    bot.send_message(message.chat.id, f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∑–∞–µ–∑–¥–∞:", reply_markup=calendar)


@bot.callback_query_handler(func=DetailedTelegramCalendar.func())
def handle_start_date(c):
    result, key, step = DetailedTelegramCalendar(min_date=datetime.date.today(), locale='ru').process(c.data)
    if not result and key:
        bot.edit_message_text(f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É {LSTEP[step]}",
                              c.message.chat.id,
                              c.message.message_id,
                              reply_markup=key)
    elif result:
        if user_data[c.message.chat.id].get('start_date') is None:
            user_data[c.message.chat.id]['start_date'] = result.strftime('%Y-%m-%d')
            bot.edit_message_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–∞—Ç—É –∑–∞–µ–∑–¥–∞: {user_data[c.message.chat.id]['start_date']}.\n"
                                  f"–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –≤—ã–µ–∑–¥–∞:",
                                  c.message.chat.id,
                                  c.message.message_id)
            ask_end_date(c)
        else:
            end_date = result.strftime('%Y-%m-%d')
            start_date = user_data[c.message.chat.id].get('start_date')
            if end_date <= start_date:
                bot.send_message(c.message.chat.id,
                                 "–î–∞—Ç–∞ –≤—ã–µ–∑–¥–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–∞ –¥–∞—Ç–µ –∑–∞–µ–∑–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –¥–∞—Ç—É.")
                ask_end_date(c)
            else:
                user_data[c.message.chat.id]['end_date'] = end_date
                bot.edit_message_text(
                    f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–∞—Ç—ã:\n–ó–∞–µ–∑–¥: {user_data[c.message.chat.id]['start_date']}\n–í—ã–µ–∑–¥: {user_data[c.message.chat.id]['end_date']}.",
                    c.message.chat.id,
                    c.message.message_id)
                bot.send_message(c.message.chat.id, "–°–∫–æ–ª—å–∫–æ –≥–æ—Å—Ç–µ–π?")
                bot.register_next_step_handler(c.message, ask_guest)


def ask_end_date(c):
    start_date = datetime.datetime.strptime(user_data[c.message.chat.id]['start_date'], '%Y-%m-%d').date()
    calendar, step = DetailedTelegramCalendar(min_date=start_date + datetime.timedelta(days=1), locale='ru').build()
    bot.send_message(c.message.chat.id, f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –≤—ã–µ–∑–¥–∞:", reply_markup=calendar)


def ask_guest(message):
    if message.text.isdigit():
        user_data[message.chat.id]['guest'] = int(message.text)
        bot.send_message(message.chat.id, "–°–∫–æ–ª—å–∫–æ —Ä–∞–∑–¥–µ–ª—å–Ω—ã—Ö —Å–ø–∞–ª—å–Ω—ã—Ö –º–µ—Å—Ç –≤–∞–º –Ω—É–∂–Ω–æ?")

        # –ü–æ–ª—É—á–µ–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ–ª—è 'sleeps' –∏–∑ —Ç–∞–±–ª–∏—Ü—ã Offer
        unique_sleeps = session.query(distinct(Offer.sleeps)).all()
        unique_sleeps = [sleep[0] for sleep in unique_sleeps if sleep[0]]  # –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º None

        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ 'sleeps'
        markup = InlineKeyboardMarkup(row_width=2)
        for sleep in unique_sleeps:
            markup.add(InlineKeyboardButton(sleep, callback_data=sleep))

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑–¥–µ–ª—å–Ω—ã—Ö —Å–ø–∞–ª—å–Ω—ã—Ö –º–µ—Å—Ç:", reply_markup=markup)
    else:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
        bot.register_next_step_handler(message, ask_guest)


@bot.callback_query_handler(func=lambda call: re.match(r'^\d+(\+\d+)*$', call.data))
def handle_bedrooms_selection(call):
    chat_id = call.message.chat.id
    bedrooms = call.data

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ø–∞–ª—å–Ω—ã—Ö –º–µ—Å—Ç
    user_data[chat_id]['bedrooms'] = bedrooms

    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –æ—Ç—Ä–∞–∑–∏—Ç—å –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    bot.edit_message_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {bedrooms} —Ä–∞–∑–¥–µ–ª—å–Ω—ã—Ö —Å–ø–∞–ª—å–Ω—ã—Ö –º–µ—Å—Ç.",
                          chat_id,
                          call.message.message_id)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å–æ–±—Ä–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    bot.send_message(chat_id, "–°–ø–∞—Å–∏–±–æ! –í–æ—Ç –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:")
    bot.send_message(chat_id, f"–ì–æ—Ä–æ–¥: {user_data[chat_id].get('city', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
                              f"–î–∞—Ç—ã: {user_data[chat_id].get('start_date', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')} - {user_data[chat_id].get('end_date', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
                              f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Å—Ç–µ–π: {user_data[chat_id].get('guest', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
                              f"–°–ø–∞–ª—å–Ω—ã—Ö –º–µ—Å—Ç: {user_data[chat_id].get('bedrooms', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}")

    # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
    city = user_data[chat_id].get('city')
    start_date = user_data[chat_id].get('start_date')
    end_date = user_data[chat_id].get('end_date')
    guest_count = user_data[chat_id].get('guest')

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
    if city and start_date and end_date and guest_count:
        amenities = ['wi_fi', 'air_conditioner']

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π —Å –ø–æ–º–æ—â—å—é —Ñ—É–Ω–∫—Ü–∏–∏ find_offers
        offers = find_offers(city, start_date, end_date, guest_count, bedrooms, amenities)

        # –ï—Å–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –Ω–∞–π–¥–µ–Ω—ã, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        if offers:
            for offer in offers:
                # –ü–æ–ª—É—á–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ —Ñ–æ—Ç–æ (–µ—Å–ª–∏ –µ—Å—Ç—å)
                main_photo = next((photo.url for photo in offer.photos if photo.is_main), None)

                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Å —É–¥–æ–±—Å—Ç–≤–∞–º–∏
                amenities = []
                if offer.washing_machine:
                    amenities.append("–°—Ç–∏—Ä–∞–ª—å–Ω–∞—è –º–∞—à–∏–Ω–∞")
                if offer.wi_fi:
                    amenities.append("Wi-Fi")
                if offer.tv:
                    amenities.append("–¢–µ–ª–µ–≤–∏–∑–æ—Ä")
                if offer.air_conditioner:
                    amenities.append("–ö–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä")
                if offer.kids_friendly:
                    amenities.append("–î—Ä—É–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ –¥–ª—è –¥–µ—Ç–µ–π")
                if offer.party:
                    amenities.append("–†–∞–∑—Ä–µ—à–µ–Ω—ã –≤–µ—á–µ—Ä–∏–Ω–∫–∏")
                if offer.refrigerator:
                    amenities.append("–•–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫")
                if offer.phone:
                    amenities.append("–¢–µ–ª–µ—Ñ–æ–Ω")
                if offer.stove:
                    amenities.append("–ü–ª–∏—Ç–∞")
                if offer.dishwasher:
                    amenities.append("–ü–æ—Å—É–¥–æ–º–æ–µ—á–Ω–∞—è –º–∞—à–∏–Ω–∞")
                if offer.music_center:
                    amenities.append("–ú—É–∑—ã–∫–∞–ª—å–Ω—ã–π —Ü–µ–Ω—Ç—Ä")
                if offer.microwave:
                    amenities.append("–ú–∏–∫—Ä–æ–≤–æ–ª–Ω–æ–≤–∫–∞")
                if offer.iron:
                    amenities.append("–£—Ç—é–≥")
                if offer.concierge:
                    amenities.append("–ö–æ–Ω—Å—å–µ—Ä–∂")
                if offer.parking:
                    amenities.append("–ü–∞—Ä–∫–æ–≤–∫–∞")
                if offer.safe:
                    amenities.append("–°–µ–π—Ñ")
                if offer.water_heater:
                    amenities.append("–í–æ–¥–æ–Ω–∞–≥—Ä–µ–≤–∞—Ç–µ–ª—å")
                if offer.television:
                    amenities.append("–¢–µ–ª–µ–≤–∏–¥–µ–Ω–∏–µ")
                if offer.bathroom:
                    amenities.append("–í–∞–Ω–Ω–∞—è –∫–æ–º–Ω–∞—Ç–∞")
                if offer.pet_friendly:
                    amenities.append("–ú–æ–∂–Ω–æ —Å –∂–∏–≤–æ—Ç–Ω—ã–º–∏")
                if offer.smoke:
                    amenities.append("–ú–æ–∂–Ω–æ –∫—É—Ä–∏—Ç—å")
                if offer.romantic:
                    amenities.append("–†–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∞—è –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞")
                if offer.jacuzzi:
                    amenities.append("–î–∂–∞–∫—É–∑–∏")
                if offer.balcony:
                    amenities.append("–ë–∞–ª–∫–æ–Ω")
                if offer.elevator:
                    amenities.append("–õ–∏—Ñ—Ç")

                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–ø–∏—Å–æ–∫ —É–¥–æ–±—Å—Ç–≤ –≤ —Å—Ç—Ä–æ–∫—É
                amenities_str = ", ".join(amenities) if amenities else "–£–¥–æ–±—Å—Ç–≤–∞ –Ω–µ —É–∫–∞–∑–∞–Ω—ã"

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ —Ñ–æ—Ç–æ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
                if main_photo:
                    bot.send_photo(chat_id, main_photo)

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏
                bot.send_message(chat_id,
                                 f"–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ: \n"
                                 f"–¶–µ–Ω–∞: {offer.price.value} {offer.price.currency}\n"
                                 f"–£–¥–æ–±—Å—Ç–≤–∞: {amenities_str}")
        else:
            bot.send_message(chat_id, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É.")
    else:
        # –ï—Å–ª–∏ –∫–∞–∫–∏—Ö-—Ç–æ –¥–∞–Ω–Ω—ã—Ö –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç, —Å–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–± —ç—Ç–æ–º
        bot.send_message(chat_id,
                         "–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥—ë–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.")


if __name__ == "__main__":
    bot.polling()

import telebot

from uuid import UUID
from connect import session
from models import User, Offer, XML_FEED, Photo, SalesAgent
from dotenv import load_dotenv
import os
import requests  # –î–æ–±–∞–≤–∏–º –±–∏–±–ª–∏–æ—Ç–µ–∫—É –¥–ª—è HTTP-–∑–∞–ø—Ä–æ—Å–æ–≤
from service import parse_and_save_offer, qr_generate, get_referral_chain

from math import ceil
from telebot import types

load_dotenv()

API_TOKEN = os.environ.get('BOT_TOKEN')
bot = telebot.TeleBot(API_TOKEN)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}

# –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–æ–ø–æ–∫ –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ –∏ –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
BUTTONS_PER_ROW = 2
ITEMS_PER_PAGE = 9  # 9 –∫–Ω–æ–ø–æ–∫ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ, 3 —Å—Ç—Ä–æ–∫–∏ –ø–æ 3 –∫–Ω–æ–ø–∫–∏

# –ü—Ä–∏–º–µ—Ä –±—É–ª–µ–≤—ã—Ö –ø–æ–ª–µ–π
BOOLEAN_FIELDS = {
    'washing_machine': '–°—Ç–∏—Ä–∞–ª—å–Ω–∞—è –º–∞—à–∏–Ω–∞', 'wi_fi': 'wi-fi', 'tv': '–¢–µ–ª–µ–≤–∏–∑–æ—Ä', 'air_conditioner': '–ö–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä',
    'kids_friendly': '–î–µ—Ç–∏', 'party': '–î–ª—è –≤–µ—á–µ—Ä–∏–Ω–æ–∫', 'refrigerator': '–•–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫',
    'phone': '–¢–µ–ª–µ—Ñ–æ–Ω', 'stove': '–ü–ª–∏—Ç–∞', 'dishwasher': '–ü–æ—Å—É–¥–æ–º–æ–µ—á–Ω–∞—è –º–∞—à–∏–Ω–∞', 'music_center': '–ú—É–∑—ã–∫–∞–ª—å–Ω—ã–π —Ü–µ–Ω—Ç—Ä',
    'microwave': '–ú–∏–∫—Ä–æ–≤–æ–ª–Ω–æ–≤–∞—è –ø–µ—á—å', 'iron': '–£—Ç—é–≥', 'concierge': '–ö–æ–Ω—Å—å–µ—Ä–∂', 'parking': '–ü–∞—Ä–∫–æ–≤–∫–∞',
    'safe': '–°–µ–π—Ñ', 'water_heater': '–ù–∞–≥—Ä–µ–≤–∞—Ç–µ–ª—å –≤–æ–¥—ã', 'pet_friendly': '–î–æ–º–∞—à–Ω–∏–µ –∂–∏–≤–æ—Ç–Ω—ã–µ', 'smoke': '–ö—É—Ä–µ–Ω–∏–µ',
    'romantic': '–†–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π', 'jacuzzi': '–î–∂–∞–∫—É–∑–∏', 'balcony': '–ë–∞–ª–∫–æ–Ω', 'elevator': '–õ–∏—Ñ—Ç'
}


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def send_welcome(message):
    command = message.text.split()
    referrer_uuid = None

    if len(command) > 1:
        try:
            referrer_uuid = UUID(command[1])  # –ü–∞—Ä—Å–∏–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π UUID
        except ValueError:
            bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω–∞—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞.\n–ó–∞–ø—Ä–æ—Å–∏—Ç–µ –Ω–æ–≤—É—é")
            referrer_uuid = None

    # –ù–∞–π–¥–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ telegram_id
    user = session.query(User).filter_by(telegram_id=message.from_user.id).first()

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    ref_link_btn = types.KeyboardButton("–°–ì–ï–ù–ï–†–ò–†–û–í–ê–¢–¨ –†–ï–§–ï–†–ê–õ–¨–ù–£–Æ –°–°–´–õ–ö–£")
    markup.add(ref_link_btn)

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–æ–≤—ã–π, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ
    if user is None:
        referer = None

        if referrer_uuid:
            referer = session.query(User).filter_by(uuid=referrer_uuid).first()

        user = User(
            telegram_id=message.from_user.id,
            username=message.from_user.username,
            chat_id=message.chat.id,
            is_client=False,  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–µ —Ö–æ—Å—Ç
            referer=referer  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ—Ñ–µ—Ä–µ—Ä–∞, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        )

        session.add(user)

        if referer:
            referer.invited_count += 1
            session.add(referer)

        session.commit()
        bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç –•–æ—Å—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞.")

    bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ XML-—Ñ–∞–π–ª.", reply_markup=markup)

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ URL
    user_states[message.from_user.id] = {'awaiting_feed_url': True}


#####################################################################################################################
# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Å—ã–ª–∫–∏ –Ω–∞ XML-—Ñ–∞–π–ª
@bot.message_handler(func=lambda message: 'https://realtycalendar.ru/xml_feed' in message.text)
def handle_url_input(message):
    user_id = message.from_user.id
    user = session.query(User).filter_by(telegram_id=user_id).first()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞ –∫–∞–∫–æ–º —ç—Ç–∞–ø–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if user_id in user_states and 'awaiting_object_urls' in user_states[user_id]:
        bot.reply_to(message, "–°–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Å—ã–ª–æ–∫ –Ω–∞ –æ–±—ä–µ–∫—Ç—ã.")
        return

    if not user:
        bot.reply_to(message, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    url = message.text.strip()

    try:
        response = requests.get(url)
        response.raise_for_status()
        xml_data = response.content.decode('utf-8')

        internal_ids = parse_and_save_offer(xml_data, bot, message)
        print(internal_ids)

        if internal_ids:
            new_feed = XML_FEED(url=url, user_id=user.id)
            session.add(new_feed)
            session.commit()

            bot.send_message(message.chat.id, f'—Å–ø–∞—Å–∏–±–æ! üëå\n–î–æ–±–∞–≤–ª–µ–Ω–æ –æ–±—ä–µ–∫—Ç–æ–≤: {len(internal_ids)}')
            user_states[user_id] = {'internal_ids': internal_ids, 'current_index': 0, 'awaiting_object_urls': True}

            first_internal_id = internal_ids[0].get('internal_id')
            first_location_address = internal_ids[0].get('location_address')
            bot.reply_to(message,
                         f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ URL –¥–ª—è –æ–±—ä–µ–∫—Ç–∞ —Å internal_id: {first_internal_id}\n–∞–¥—Ä–µ—Å–æ–º: {first_location_address}")
        else:
            bot.reply_to(message, "–í –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–º —Ñ–∞–π–ª–µ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ –Ω–æ–≤–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞.")

    except Exception as e:
        session.rollback()
        bot.reply_to(message, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: {str(e)}.")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Å—ã–ª–æ–∫ –Ω–∞ –æ–±—ä–µ–∫—Ç—ã (apart)
@bot.message_handler(
    func=lambda message: message.from_user.id in user_states and 'awaiting_object_urls' in user_states[
        message.from_user.id])
def handle_object_url(message):
    user_id = message.from_user.id
    user_state = user_states[user_id]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—ã—Ç–∞–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–Ω–æ–≤–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ XML-—Ñ–∞–π–ª
    if 'https://realtycalendar.ru/xml_feed' in message.text:
        bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≤–µ—Ä—à–∏—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Å—ã–ª–æ–∫ –Ω–∞ –æ–±—ä–µ–∫—Ç—ã.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ–±—ä–µ–∫—Ç
    if not message.text.startswith("https://realtycalendar.ru/apart"):
        bot.reply_to(message, "–ù–µ–≤–µ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL –Ω–∞ –æ–±—ä–µ–∫—Ç.")
        return

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –æ–±—ä–µ–∫—Ç –∏ –µ–≥–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π ID
    internal_ids = user_state['internal_ids']
    current_index = user_state['current_index']
    current_internal_id_data = internal_ids[current_index]
    internal_id = current_internal_id_data.get('internal_id')

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º URL –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –æ–±—ä–µ–∫—Ç–∞
    new_url = message.text.strip()
    offer = session.query(Offer).filter_by(internal_id=internal_id).first()

    if offer:
        offer.url_to = new_url
        session.commit()

        current_index += 1
        user_state['current_index'] = current_index

        if current_index < len(internal_ids):
            next_internal_id_data = internal_ids[current_index]
            next_internal_id = next_internal_id_data.get('internal_id')
            next_location_address = next_internal_id_data.get('location_address')

            bot.reply_to(message,
                         f"–í–≤–µ–¥–∏—Ç–µ URL –¥–ª—è –æ–±—ä–µ–∫—Ç–∞ —Å internal_id: {next_internal_id}, –∞–¥—Ä–µ—Å: {next_location_address}")
        else:
            del user_states[user_id]
            bot.reply_to(message, "–í—Å–µ —Å—Å—ã–ª–∫–∏ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã!")
    else:
        bot.reply_to(message, f"–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å internal_id {internal_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")


######################################################################################################################

@bot.message_handler(commands=['edit_offer'])
def edit_offer(message):
    user = session.query(User).filter_by(telegram_id=message.from_user.id).first()

    if not user:
        bot.send_message(message.chat.id, "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
        return

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ—Ñ—Ñ–µ—Ä—ã, —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    offers = session.query(Offer).filter_by(created_by=user.id).all()
    if not offers:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –æ—Ñ—Ñ–µ—Ä–æ–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
        return

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    if message.from_user.id not in user_states:
        user_states[message.from_user.id] = {}

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ 1, –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ –∏–Ω–æ–µ
    user_states[message.from_user.id]['page'] = 1

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –æ—Ñ—Ñ–µ—Ä–æ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
    markup = paginate_buttons(offers, page=1)
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ñ—Ñ–µ—Ä –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=markup)


def paginate_buttons(offers, page=1):
    markup = types.InlineKeyboardMarkup()

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –∏ –∫–æ–Ω–µ—á–Ω—ã–π –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    start_index = (page - 1) * ITEMS_PER_PAGE
    end_index = start_index + ITEMS_PER_PAGE

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ñ—Ñ–µ—Ä–æ–≤ –Ω–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    for offer in offers[start_index:end_index]:
        button = types.InlineKeyboardButton(
            text=f"–û–±—ä–µ–∫—Ç {offer.internal_id} {offer.location.address}",
            callback_data=f"edit_offer_{offer.internal_id}"
        )
        markup.add(button)

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –∏ "–í–ø–µ—Ä–µ–¥" –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü
    total_pages = ceil(len(offers) / ITEMS_PER_PAGE)

    pagination_buttons = []
    if page > 1:
        pagination_buttons.append(
            types.InlineKeyboardButton(
                text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"prev_page_{page - 1}"
            )
        )
    if page < total_pages:
        pagination_buttons.append(
            types.InlineKeyboardButton(
                text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f"next_page_{page + 1}"
            )
        )

    if pagination_buttons:
        markup.add(*pagination_buttons)

    return markup


@bot.callback_query_handler(func=lambda call: call.data.startswith(('prev_page_', 'next_page_')))
def handle_pagination(call):
    page = int(call.data.split('_')[-1])  # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–∑ callback_data
    user = session.query(User).filter_by(telegram_id=call.from_user.id).first()
    offers = session.query(Offer).filter_by(created_by=user.id).all()

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ user_states
    user_states[call.from_user.id]['page'] = page

    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Å –æ—Ñ—Ñ–µ—Ä–∞–º–∏ –¥–ª—è –Ω–æ–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    markup = paginate_buttons(offers, page=page)
    bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=markup)


# –°–æ–∑–¥–∞–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±—É–ª–µ–≤—ã—Ö –∫–Ω–æ–ø–æ–∫
def create_boolean_buttons(offer, page=0):
    markup = types.InlineKeyboardMarkup()

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–Ω–¥–µ–∫—Å –Ω–∞—á–∞–ª–∞ –∏ –∫–æ–Ω—Ü–∞ –∫–Ω–æ–ø–æ–∫ –Ω–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    start_index = page * ITEMS_PER_PAGE
    end_index = start_index + ITEMS_PER_PAGE
    fields_on_page = list(BOOLEAN_FIELDS.items())[start_index:end_index]

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤ —Ç—Ä–∏ –∫–æ–ª–æ–Ω–∫–∏
    row = []
    for i, (field, display_name) in enumerate(fields_on_page):
        field_value = getattr(offer, field)
        field_display = f"{display_name} {'‚úÖ' if field_value else '‚ùå'}"
        button = types.InlineKeyboardButton(text=field_display, callback_data=f"toggle_{field}_{page}")
        row.append(button)

        if (i + 1) % BUTTONS_PER_ROW == 0 or i == len(fields_on_page) - 1:
            markup.add(*row)
            row = []

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    navigation_buttons = []
    if page > 0:
        navigation_buttons.append(types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"page_{page - 1}"))
    if end_index < len(BOOLEAN_FIELDS):
        navigation_buttons.append(types.InlineKeyboardButton(text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f"page_{page + 1}"))

    if navigation_buttons:
        markup.add(*navigation_buttons)

    return markup


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–æ–∫ –æ—Ñ—Ñ–µ—Ä–∞
def update_offer_buttons(call, offer, page=0):
    offer_details = f"–¢–µ–∫—É—â–∏–π –æ—Ñ—Ñ–µ—Ä:\nID: {offer.internal_id}\nURL: {offer.url_to}\n–ê–¥—Ä–µ—Å: {offer.location.address}\n–û–ø–∏—Å–∞–Ω–∏–µ: {offer.description[:200]}..."

    markup = create_boolean_buttons(offer, page)
    markup.add(
        types.InlineKeyboardButton(text="URL", callback_data=f"edit_url_{offer.internal_id}"),
        types.InlineKeyboardButton(text="–û–ø–∏—Å–∞–Ω–∏–µ", callback_data=f"edit_description_{offer.internal_id}"),
        types.InlineKeyboardButton(text="–°–ø–∞–ª—å–Ω—ã—Ö –º–µ—Å—Ç", callback_data=f"edit_sleeps_{offer.internal_id}"),
        types.InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É", callback_data=f"edit_price_{offer.internal_id}"),
        types.InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –∞–≥–µ–Ω—Ç–∞", callback_data=f"edit_sales_agent_{offer.internal_id}"),
        types.InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –ø–ª–æ—â–∞–¥—å", callback_data=f"edit_area_{offer.internal_id}"),
        types.InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ", callback_data=f"edit_photos_{offer.internal_id}"),
        types.InlineKeyboardButton(text="–ö —Å–ø–∏—Å–∫—É –æ—Ñ—Ñ–µ—Ä–æ–≤", callback_data="back_to_offers"),
        types.InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel_edit"),
    )

    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text=offer_details + "\n\n–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?",
        reply_markup=markup
    )


@bot.callback_query_handler(func=lambda call: call.data == "back_to_offers")
def handle_back_to_offers(call):
    user = session.query(User).filter_by(telegram_id=call.from_user.id).first()
    offers = session.query(Offer).filter_by(created_by=user.id).all()

    # –£—Å—Ç–∞–Ω–æ–≤–∏–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ–±—Ä–∞—Ç–Ω–æ –Ω–∞ 1
    user_states[call.from_user.id]['page'] = 1

    # –û—Ç–ø—Ä–∞–≤–∏–º —Å–ø–∏—Å–æ–∫ –æ—Ñ—Ñ–µ—Ä–æ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
    markup = paginate_buttons(offers, page=1)
    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                          text="–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ñ—Ñ–µ—Ä –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=markup)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –æ—Ñ—Ñ–µ—Ä–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
@bot.callback_query_handler(func=lambda call: call.data.startswith("edit_offer_"))
def handle_offer_selection(call):
    internal_id = call.data.split("_")[2]
    offer = session.query(Offer).filter_by(internal_id=str(internal_id)).first()

    if offer and offer.creator.telegram_id == call.from_user.id:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        update_offer_buttons(call, offer)
        user_states[call.from_user.id] = {'offer_to_edit': offer, 'current_page': 0}  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    else:
        bot.send_message(call.message.chat.id, "–û—à–∏–±–∫–∞: –û—Ñ—Ñ–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞–º.")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –±—É–ª–µ–≤–æ–≥–æ –ø–æ–ª—è
@bot.callback_query_handler(func=lambda call: call.data.startswith('toggle_'))
def handle_toggle_field(call):
    field, page = call.data.replace('toggle_', '').rsplit('_', 1)
    page = int(page)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ
    user_id = call.from_user.id
    offer_id = user_states[user_id]['offer_to_edit'].internal_id

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Ñ—Ñ–µ—Ä –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    offer = session.query(Offer).filter_by(internal_id=offer_id).first()

    # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è
    current_value = getattr(offer, field)
    setattr(offer, field, not current_value)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    session.commit()

    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Å —É—á–µ—Ç–æ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è, –æ—Å—Ç–∞–≤–∞—è—Å—å –Ω–∞ —Ç–æ–π –∂–µ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    update_offer_buttons(call, offer, page)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
@bot.callback_query_handler(func=lambda call: call.data.startswith('page_'))
def handle_pagination(call):
    page = int(call.data.split('_')[1])
    user_id = call.from_user.id
    offer_id = user_states[user_id]['offer_to_edit'].internal_id

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Ñ—Ñ–µ—Ä –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    offer = session.query(Offer).filter_by(internal_id=offer_id).first()

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    update_offer_buttons(call, offer, page)


@bot.callback_query_handler(func=lambda call: call.data.startswith("edit_url_"))
def handle_edit_url(call):
    internal_id = call.data.split("_")[2]
    offer = user_states[call.from_user.id]['offer_to_edit']

    if offer and offer.internal_id == internal_id:
        # –ó–∞–ø—Ä–æ—Å –Ω–æ–≤–æ–≥–æ URL
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π URL:"
        )
        user_states[call.from_user.id]['editing_field'] = 'url'
    else:
        bot.send_message(call.message.chat.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ñ—Ñ–µ—Ä–∞.")


@bot.message_handler(
    func=lambda message: message.chat.id in user_states and user_states[message.chat.id].get('editing_field') == 'url')
def process_new_url(message):
    user_id = message.from_user.id
    new_url = message.text
    offer = user_states[user_id]['offer_to_edit']

    # –û–±–Ω–æ–≤–∏—Ç–µ URL –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    offer.url_to = new_url
    session.commit()  # –ù–µ –∑–∞–±—É–¥—å—Ç–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Å–µ—Å—Å–∏–∏

    # –û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ñ—Ñ–µ—Ä–µ
    offer_details = f"–¢–µ–∫—É—â–∏–π –æ—Ñ—Ñ–µ—Ä:\nID: {offer.internal_id}\nURL: {offer.url_to}\n–ê–¥—Ä–µ—Å: {offer.location.address}\n–û–ø–∏—Å–∞–Ω–∏–µ: {offer.description[:200]}..."

    markup = create_boolean_buttons(offer)
    markup.add(
        types.InlineKeyboardButton(text="URL", callback_data=f"edit_url_{offer.internal_id}"),
        types.InlineKeyboardButton(text="–û–ø–∏—Å–∞–Ω–∏–µ", callback_data=f"edit_description_{offer.internal_id}"),
        types.InlineKeyboardButton(text="–°–ø–∞–ª—å–Ω—ã—Ö –º–µ—Å—Ç", callback_data=f"edit_sleeps_{offer.internal_id}"),
        types.InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É", callback_data=f"edit_price_{offer.internal_id}"),
        types.InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –∞–≥–µ–Ω—Ç–∞", callback_data=f"edit_sales_agent_{offer.internal_id}"),
        types.InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –ø–ª–æ—â–∞–¥—å", callback_data=f"edit_area_{offer.internal_id}"),
        types.InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ", callback_data=f"edit_photos_{offer.internal_id}"),
        types.InlineKeyboardButton(text="–ö —Å–ø–∏—Å–∫—É –æ—Ñ—Ñ–µ—Ä–æ–≤", callback_data="back_to_offers"),
        types.InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel_edit"),
    )

    bot.send_message(chat_id=message.chat.id, text=offer_details + "\n\n–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?", reply_markup=markup)

    # –û—á–∏—Å—Ç–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    user_states[user_id]['editing_field'] = None


####### ---------- JGJHGJHGHJ  -------- #########
@bot.callback_query_handler(func=lambda call: call.data.startswith("edit_description_"))
def handle_edit_description(call):
    internal_id = call.data.split("_")[2]
    offer = user_states[call.from_user.id]['offer_to_edit']

    if offer and offer.internal_id == internal_id:
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:"
        )
        user_states[call.from_user.id]['editing_field'] = 'description'
    else:
        bot.send_message(call.message.chat.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ñ—Ñ–µ—Ä–∞.")


@bot.callback_query_handler(func=lambda call: call.data.startswith("edit_sleeps_"))
def handle_edit_sleeps(call):
    internal_id = call.data.split("_")[2]
    offer = user_states[call.from_user.id]['offer_to_edit']

    if offer and offer.internal_id == internal_id:
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ø–∞–ª—å–Ω—ã—Ö –º–µ—Å—Ç:"
        )
        user_states[call.from_user.id]['editing_field'] = 'sleeps'
    else:
        bot.send_message(call.message.chat.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ñ—Ñ–µ—Ä–∞.")


@bot.callback_query_handler(func=lambda call: call.data.startswith("edit_price_"))
def handle_edit_price(call):
    internal_id = call.data.split("_")[2]
    offer = user_states[call.from_user.id]['offer_to_edit']

    if offer and offer.internal_id == internal_id:
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É:"
        )
        user_states[call.from_user.id]['editing_field'] = 'price'
    else:
        bot.send_message(call.message.chat.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ñ—Ñ–µ—Ä–∞.")


@bot.callback_query_handler(func=lambda call: call.data.startswith("edit_sales_agent_"))
def handle_edit_sales_agent(call):
    internal_id = call.data.split("_")[2]
    offer = user_states[call.from_user.id]['offer_to_edit']

    if offer and offer.internal_id == internal_id:
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–≥–æ –∞–≥–µ–Ω—Ç–∞:"
        )
        user_states[call.from_user.id]['editing_field'] = 'sales_agent'
    else:
        bot.send_message(call.message.chat.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ñ—Ñ–µ—Ä–∞.")


@bot.callback_query_handler(func=lambda call: call.data.startswith("edit_area_"))
def handle_edit_area(call):
    internal_id = call.data.split("_")[2]
    offer = user_states[call.from_user.id]['offer_to_edit']

    if offer and offer.internal_id == internal_id:
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –ø–ª–æ—â–∞–¥—å:"
        )
        user_states[call.from_user.id]['editing_field'] = 'area'
    else:
        bot.send_message(call.message.chat.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ñ—Ñ–µ—Ä–∞.")


##########
@bot.message_handler(
    func=lambda message: message.chat.id in user_states and user_states[message.chat.id].get('editing_field') in ['url',
                                                                                                                  'description',
                                                                                                                  'sleeps',
                                                                                                                  'price',
                                                                                                                  'sales_agent',
                                                                                                                  'area'])
def process_offer_updates(message):
    user_id = message.from_user.id
    offer = user_states[user_id]['offer_to_edit']
    field = user_states[user_id]['editing_field']

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—è
    try:
        if field == 'url':
            new_value = message.text
            offer.url_to = new_value
        elif field == 'description':
            new_value = message.text
            offer.description = new_value
        elif field == 'sleeps':
            new_value = message.text
            offer.sleeps = new_value  # –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —ç—Ç–æ —á–∏—Å–ª–æ
        elif field == 'price':
            new_value = message.text
            offer.price = new_value  # –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —ç—Ç–æ —á–∏—Å–ª–æ
        elif field == 'sales_agent':
            new_value = message.text
            # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ sales_agent - —ç—Ç–æ –æ–±—ä–µ–∫—Ç SalesAgent, –≤–∞–º –Ω—É–∂–Ω–æ –µ–≥–æ –Ω–∞–π—Ç–∏ –ø–æ –∏–º–µ–Ω–∏ –∏–ª–∏ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞
            offer.sales_agent = session.query(SalesAgent).filter(SalesAgent.name == new_value).first()
        elif field == 'area':
            new_value = message.text
            offer.area = float(new_value)  # –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —ç—Ç–æ —á–∏—Å–ª–æ

        # –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        session.commit()

        # –û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ñ—Ñ–µ—Ä–µ
        offer_details = f"–¢–µ–∫—É—â–∏–π –æ—Ñ—Ñ–µ—Ä:\nID: {offer.internal_id}\nURL: {offer.url_to}\n–û–ø–∏—Å–∞–Ω–∏–µ: {offer.description[:200]}...\n–°–ø–∞–ª—å–Ω—ã—Ö –º–µ—Å—Ç: {offer.sleeps}\n–¶–µ–Ω–∞: {offer.price}\n–ê–≥–µ–Ω—Ç: {offer.sales_agent.name if offer.sales_agent else '–ù–µ —É–∫–∞–∑–∞–Ω'}\n–ü–ª–æ—â–∞–¥—å: {offer.area}"

        markup = create_boolean_buttons(offer)
        markup.add(
            types.InlineKeyboardButton(text="URL", callback_data=f"edit_url_{offer.internal_id}"),
            types.InlineKeyboardButton(text="–û–ø–∏—Å–∞–Ω–∏–µ", callback_data=f"edit_description_{offer.internal_id}"),
            types.InlineKeyboardButton(text="–°–ø–∞–ª—å–Ω—ã—Ö –º–µ—Å—Ç", callback_data=f"edit_sleeps_{offer.internal_id}"),
            types.InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É", callback_data=f"edit_price_{offer.internal_id}"),
            types.InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –∞–≥–µ–Ω—Ç–∞", callback_data=f"edit_sales_agent_{offer.internal_id}"),
            types.InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –ø–ª–æ—â–∞–¥—å", callback_data=f"edit_area_{offer.internal_id}"),
            types.InlineKeyboardButton(text="–ö —Å–ø–∏—Å–∫—É –æ—Ñ—Ñ–µ—Ä–æ–≤", callback_data="back_to_offers"),
            types.InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel_edit"),
        )

        bot.send_message(chat_id=message.chat.id, text=offer_details + "\n\n–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?",
                         reply_markup=markup)

    except ValueError as e:
        bot.send_message(chat_id=message.chat.id,
                         text=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: {str(e)}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.")
    except Exception as e:
        bot.send_message(chat_id=message.chat.id, text=f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

    # –û—á–∏—Å—Ç–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    user_states[user_id]['editing_field'] = None


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã
@bot.callback_query_handler(func=lambda call: call.data == "cancel_edit")
def handle_cancel_edit(call):
    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ñ—Ñ–µ—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ."
    )
    user_states.pop(call.from_user.id, None)  # –£–¥–∞–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è


####################################################################################


####################################################################################

# @bot.callback_query_handler(func=lambda call: call.data.startswith("edit_price_"))
# def handle_edit_price(call):
#     internal_id = call.data.split("_")[2]
#     offer = session.query(Offer).filter_by(internal_id=str(internal_id)).first()
#
#     if offer:
#         bot.send_message(call.message.chat.id,
#                          "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É –∏ –≤–∞–ª—é—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ '–∑–Ω–∞—á–µ–Ω–∏–µ –≤–∞–ª—é—Ç–∞' (–Ω–∞–ø—Ä–∏–º–µ—Ä, '1000 USD').")
#         user_states[call.from_user.id] = {'offer_to_edit': offer, 'edit_type': 'price'}
#     else:
#         bot.send_message(call.message.chat.id, "–û—à–∏–±–∫–∞: –û—Ñ—Ñ–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
#
#
# def get_agents():
#     return session.query(SalesAgent).all()
#
#
# # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–≥–µ–Ω—Ç–∞
# @bot.callback_query_handler(func=lambda call: call.data.startswith("edit_sales_agent_"))
# def handle_edit_sales_agent(call):
#     internal_id = call.data.split("_")[2]
#     offer = session.query(Offer).filter_by(internal_id=str(internal_id)).first()
#
#     if offer:
#         # –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∞–≥–µ–Ω—Ç–æ–≤
#         agents = get_agents()  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à—É —Ñ—É–Ω–∫—Ü–∏—é
#         markup = types.InlineKeyboardMarkup()
#         for agent in agents:
#             markup.add(
#                 types.InlineKeyboardButton(text=agent.name, callback_data=f"set_agent_{agent.id}_{offer.internal_id}"))
#         bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∞–≥–µ–Ω—Ç–∞:", reply_markup=markup)
#     else:
#         bot.send_message(call.message.chat.id, "–û—à–∏–±–∫–∞: –û—Ñ—Ñ–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
#
#
# # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–ª–æ—â–∞–¥–∏
# @bot.callback_query_handler(func=lambda call: call.data.startswith("edit_area_"))
# def handle_edit_area(call):
#     internal_id = call.data.split("_")[2]
#     offer = session.query(Offer).filter_by(internal_id=str(internal_id)).first()
#
#     if offer:
#         bot.send_message(call.message.chat.id,
#                          "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –ø–ª–æ—â–∞–¥—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ '–∑–Ω–∞—á–µ–Ω–∏–µ –µ–¥–∏–Ω–∏—Ü–∞' (–Ω–∞–ø—Ä–∏–º–µ—Ä, '50 m2').")
#         user_states[call.from_user.id] = {'offer_to_edit': offer, 'edit_type': 'area'}
#     else:
#         bot.send_message(call.message.chat.id, "–û—à–∏–±–∫–∞: –û—Ñ—Ñ–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
#
#
# # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
# @bot.callback_query_handler(func=lambda call: call.data.startswith("edit_photos_"))
# def handle_edit_photos(call):
#     internal_id = call.data.split("_")[2]
#     offer = session.query(Offer).filter_by(internal_id=str(internal_id)).first()
#
#     if offer:
#         # –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
#         markup = types.InlineKeyboardMarkup()
#         for photo in offer.photos:
#             markup.add(types.InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å " + photo.url,
#                                                   callback_data=f"delete_photo_{photo.id}_{offer.internal_id}"))
#         markup.add(types.InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ", callback_data=f"add_photo_{offer.internal_id}"))
#         bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ:", reply_markup=markup)
#     else:
#         bot.send_message(call.message.chat.id, "–û—à–∏–±–∫–∞: –û—Ñ—Ñ–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
#
#
# @bot.callback_query_handler(func=lambda call: call.data.startswith("edit_description_"))
# def handle_edit_description(call):
#     internal_id = call.data.split("_")[2]
#     offer = user_states[call.from_user.id]['offer_to_edit']
#
#     if offer and offer.internal_id == internal_id:
#         # –ó–∞–ø—Ä–æ—Å –Ω–æ–≤–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è
#         bot.edit_message_text(
#             chat_id=call.message.chat.id,
#             message_id=call.message.message_id,
#             text="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:"
#         )
#         user_states[call.from_user.id]['editing_field'] = 'description'
#     else:
#         bot.send_message(call.message.chat.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ñ—Ñ–µ—Ä–∞.")
#
#
# @bot.callback_query_handler(func=lambda call: call.data.startswith("edit_sleeps_"))
# def handle_edit_description(call):
#     internal_id = call.data.split("_")[2]
#     offer = user_states[call.from_user.id]['offer_to_edit']
#
#     if offer and offer.internal_id == internal_id:
#         # –ó–∞–ø—Ä–æ—Å –Ω–æ–≤–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è
#         bot.edit_message_text(
#             chat_id=call.message.chat.id,
#             message_id=call.message.message_id,
#             text="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:"
#         )
#         user_states[call.from_user.id]['editing_field'] = 'sleeps'
#     else:
#         bot.send_message(call.message.chat.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ñ—Ñ–µ—Ä–∞.")
#
#
#
# @bot.message_handler(func=lambda message: message.from_user.id in user_states)
# def handle_text(message):
#     user_id = message.from_user.id
#     offer = user_states[user_id].get('offer_to_edit')
#     edit_type = user_states[user_id].get('edit_type')
#
#     if edit_type == 'price':
#         try:
#             value, currency = message.text.split()
#             value = float(value)
#             offer.price.value = value
#             offer.price.currency = currency
#             session.commit()
#             bot.send_message(user_id, "–¶–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.")
#         except Exception as e:
#             bot.send_message(user_id,
#                              "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ü–µ–Ω—ã. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –≤–≤–µ–ª–∏ –¥–∞–Ω–Ω—ã–µ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.")
#         finally:
#             del user_states[user_id]  # –£–¥–∞–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
#
#     elif edit_type == 'area':
#         try:
#             value, unit = message.text.split()
#             value = float(value)
#             offer.area.value = value
#             offer.area.unit = unit
#             session.commit()
#             bot.send_message(user_id, "–ü–ª–æ—â–∞–¥—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.")
#         except Exception as e:
#             bot.send_message(user_id,
#                              "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–ª–æ—â–∞–¥–∏. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –≤–≤–µ–ª–∏ –¥–∞–Ω–Ω—ã–µ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.")
#         finally:
#             del user_states[user_id]  # –£–¥–∞–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
#
#
# # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∞–≥–µ–Ω—Ç–∞
# @bot.callback_query_handler(func=lambda call: call.data.startswith("set_agent_"))
# def handle_set_agent(call):
#     agent_id, internal_id = call.data.split("_")[2:4]
#     offer = session.query(Offer).filter_by(internal_id=str(internal_id)).first()
#
#     if offer:
#         offer.sales_agent_id = agent_id
#         session.commit()
#         bot.send_message(call.message.chat.id, "–ê–≥–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω.")
#     else:
#         bot.send_message(call.message.chat.id, "–û—à–∏–±–∫–∞: –û—Ñ—Ñ–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
#
#
# # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
# @bot.callback_query_handler(func=lambda call: call.data.startswith("add_photo_"))
# def handle_add_photo(call):
#     internal_id = call.data.split("_")[2]
#     # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–æ–≤–æ–≥–æ —Ñ–æ—Ç–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —á–µ—Ä–µ–∑ URL –∏–ª–∏ —Ñ–∞–π–ª)
#     # –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ
#
#
# @bot.callback_query_handler(func=lambda call: call.data.startswith("delete_photo_"))
# def handle_delete_photo(call):
#     photo_id, internal_id = call.data.split("_")[2:4]
#     offer = session.query(Offer).filter_by(internal_id=str(internal_id)).first()
#     photo = session.query(Photo).filter_by(id=photo_id).first()
#
#     if offer and photo:
#         session.delete(photo)
#         session.commit()
#         bot.send_message(call.message.chat.id, "–§–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ.")
#     else:
#         bot.send_message(call.message.chat.id, "–û—à–∏–±–∫–∞: –§–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
#
#
# @bot.message_handler(
#     func=lambda message: message.from_user.id in user_states and 'editing_field' in user_states[message.from_user.id])
# def handle_new_value(message):
#     user_id = message.from_user.id
#     offer = user_states[user_id]['offer_to_edit']
#     field_to_edit = user_states[user_id]['editing_field']
#     new_value = message.text.strip()
#
#     # –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—è
#     if field_to_edit == 'url':
#         offer.url_to = new_value
#         bot.send_message(message.chat.id, f"URL –¥–ª—è –æ—Ñ—Ñ–µ—Ä–∞ {offer.internal_id} –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞: {new_value}")
#     elif field_to_edit == 'description':
#         offer.description = new_value
#         bot.send_message(message.chat.id, f"–û–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –æ—Ñ—Ñ–µ—Ä–∞ {offer.internal_id} –æ–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞: {new_value}")
#
#     session.commit()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
#     del user_states[user_id]  # –£–¥–∞–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
#
#
# # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
# @bot.message_handler(
#     func=lambda message: message.from_user.id in user_states and 'offer_to_edit' in user_states[message.from_user.id])
# def handle_edit_choice(message):
#     user_id = message.from_user.id
#     offer = user_states[user_id]['offer_to_edit']
#
#     if message.text == "–ò–∑–º–µ–Ω–∏—Ç—å URL":
#         bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π URL –¥–ª—è —ç—Ç–æ–≥–æ –æ—Ñ—Ñ–µ—Ä–∞:")
#         user_states[user_id]['editing_url'] = True
#     elif message.text == "–ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ":
#         bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ –æ—Ñ—Ñ–µ—Ä–∞:")
#         user_states[user_id]['editing_description'] = True
#         # fixme –¥–æ–ø–∏—Å–∞—Ç—å –ø—Ä–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∞–ª—å–Ω—ã—Ö –º–µ—Å—Ç
#     elif message.text == "–û—Ç–º–µ–Ω–∞":
#         del user_states[user_id]  # –£–¥–∞–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
#         bot.send_message(message.chat.id, "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
#     else:
#         bot.send_message(message.chat.id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.")
#
#
# # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è URL
# @bot.message_handler(
#     func=lambda message: message.from_user.id in user_states and 'editing_url' in user_states[message.from_user.id])
# def handle_new_url_input(message):
#     user_id = message.from_user.id
#     new_url = message.text.strip()
#     offer = user_states[user_id]['offer_to_edit']
#
#     # –û–±–Ω–æ–≤–ª—è–µ–º URL –æ—Ñ—Ñ–µ—Ä–∞
#     offer.url_to = new_url
#     session.commit()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
#
#     bot.send_message(message.chat.id,
#                      f"URL –¥–ª—è –æ—Ñ—Ñ–µ—Ä–∞ —Å internal_id {offer.internal_id} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞: {new_url}")
#
#     # –£–¥–∞–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
#     del user_states[user_id]
#
#
# # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è
# @bot.message_handler(func=lambda message: message.from_user.id in user_states and 'editing_description' in user_states[
#     message.from_user.id])
# def handle_new_description_input(message):
#     user_id = message.from_user.id
#     new_description = message.text.strip()
#     offer = user_states[user_id]['offer_to_edit']
#
#     # –û–±–Ω–æ–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –æ—Ñ—Ñ–µ—Ä–∞
#     offer.description = new_description
#     session.commit()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
#
#     bot.send_message(message.chat.id,
#                      f"–û–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –æ—Ñ—Ñ–µ—Ä–∞ —Å internal_id {offer.internal_id} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞: {new_description}")
#
#     # –£–¥–∞–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
#     del user_states[user_id]
#
#
# # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –≤–≤–æ–¥–∞ URL
# @bot.message_handler(func=lambda message: message.from_user.id in user_states and 'update_existing' not in user_states[
#     message.from_user.id])
# def handle_url_input(message):
#     user_id = message.from_user.id
#     user_state = user_states[user_id]
#
#     url_to = message.text.strip()
#     internal_ids = user_state['internal_ids']
#     current_index = user_state['current_index']
#
#     current_internal_id_data = internal_ids[current_index]
#     internal_id = current_internal_id_data.get('internal_id')
#
#     offer = session.query(Offer).filter_by(internal_id=internal_id).first()
#
#     if offer:
#         offer.url_to = url_to
#         session.commit()
#         bot.reply_to(message, f"–°—Å—ã–ª–∫–∞ –¥–ª—è internal_id {internal_id} –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞: {url_to}")
#
#         current_index += 1
#         user_state['current_index'] = current_index
#
#         if current_index < len(internal_ids):
#             next_internal_id_data = internal_ids[current_index]
#             next_internal_id = next_internal_id_data.get('internal_id')
#             bot.reply_to(message, f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ URL –¥–ª—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å internal_id: {next_internal_id}")
#         else:
#             del user_states[user_id]
#             bot.reply_to(message, "–í—Å–µ —Å—Å—ã–ª–∫–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.")
#     else:
#         bot.reply_to(message, f"–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å internal_id {internal_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")


#####################################################################################################################
# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–°–ì–ï–ù–ï–†–ò–†–û–í–ê–¢–¨ –†–ï–§–ï–†–ê–õ–¨–ù–£–Æ –°–°–´–õ–ö–£"
@bot.message_handler(func=lambda message: message.text == "–°–ì–ï–ù–ï–†–ò–†–û–í–ê–¢–¨ –†–ï–§–ï–†–ê–õ–¨–ù–£–Æ –°–°–´–õ–ö–£")
def handle_referral_link(message):
    telegram_user_id = message.from_user.id

    # –ù–∞–π–¥–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ telegram_id
    user = session.query(User).filter_by(telegram_id=telegram_user_id).first()

    if user:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É —Å UUID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        ref_link = f"https://t.me/VgostiBot2_bot?start={user.uuid}"

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è QR-–∫–æ–¥–∞ (–∑–¥–µ—Å—å –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏—è qr_generate)
        qr_generate(ref_link, f"{os.getcwd()}/pdfs/host.pdf", f"{user.uuid}")

        # –ü—É—Ç—å –∫ PDF —Ñ–∞–π–ª—É
        pdf_path = f"{os.getcwd()}/pdfs/created/{user.uuid}.pdf"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –ø—É—Ç–∏
        if os.path.exists(pdf_path):
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º PDF —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            with open(pdf_path, 'rb') as pdf_file:
                bot.send_document(message.chat.id, pdf_file)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–æ–π
            bot.send_message(message.chat.id, f"–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: {ref_link}")
        else:
            # –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            bot.send_message(message.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ PDF —Ñ–∞–π–ª. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    else:
        bot.send_message(message.chat.id, "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")


# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –¥–æ 6 —É—Ä–æ–≤–Ω—è
@bot.message_handler(commands=['allrefstats'])
def handle_allrefstats(message):
    telegram_user_id = message.from_user.id

    # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ telegram_user_id
    user = session.query(User).filter_by(telegram_id=telegram_user_id).first()

    if user:
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Ü–µ–ø–æ—á–∫—É
        all_referrals = get_referral_chain(user)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–µ—Ç–∞–ª—è–º–∏
        if all_referrals:
            message_text = "–†–µ—Ñ–µ—Ä–∞–ª—ã –¥–æ 6 —É—Ä–æ–≤–Ω—è:\n"
            for referral_info in all_referrals:
                subscription_status = "–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞" if referral_info[
                    "has_active_subscription"] else "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞"
                message_text += f"telegram_id: {referral_info['telegram_id']} –ò–º—è: {referral_info['first_name']}, –£—Ä–æ–≤–µ–Ω—å: {referral_info['level']}, {subscription_status}\n"
        else:
            message_text = "–£ –≤–∞—Å –Ω–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤."

        bot.send_message(message.chat.id, message_text)
    else:
        bot.send_message(message.chat.id, "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")


if __name__ == "__main__":
    bot.polling()

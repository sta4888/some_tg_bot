import datetime
import telebot
from telegram_bot_calendar import DetailedTelegramCalendar, LSTEP
from dotenv import load_dotenv
import os

from connect import session
from models import Location, Offer
from service import find_offers

load_dotenv()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
API_TOKEN = os.environ.get('BOT_TOKEN')
bot = telebot.TeleBot(API_TOKEN)

user_data = {}

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏ –∏ –º–µ—Å—è—Ü–µ–≤ –Ω–∞ —Ä—É—Å—Å–∫–æ–º
days_of_week = ['–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±', '–í—Å']
months_of_year = [
    '–Ø–Ω–≤–∞—Ä—å', '–§–µ–≤—Ä–∞–ª—å', '–ú–∞—Ä—Ç', '–ê–ø—Ä–µ–ª—å', '–ú–∞–π', '–ò—é–Ω—å',
    '–ò—é–ª—å', '–ê–≤–≥—É—Å—Ç', '–°–µ–Ω—Ç—è–±—Ä—å', '–û–∫—Ç—è–±—Ä—å', '–ù–æ—è–±—Ä—å', '–î–µ–∫–∞–±—Ä—å'
]


@bot.message_handler(commands=['start'])
def start(message):
    bot.send_message(message.chat.id, """–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! üëã–≠—Ç–æ –í–ì–û–°–¢–ò–±–æ—Ç. 

–Ø –Ω–∞–π–¥—É –¥–ª—è –í–∞—Å –∫–≤–∞—Ä—Ç–∏—Ä—É –∏–ª–∏ –∞–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç—ã. üè†

–ù–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –≥–æ—Ä–æ–¥, ‚úàÔ∏è–¥–∞—Ç—ã –∑–∞–µ–∑–¥–∞ –∏ –≤—ã–µ–∑–¥–∞üöò,  –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Å—Ç–µ–πüõçüõçüõç –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑–¥–µ–ª—å–Ω—ã—Ö —Å–ø–∞–ª—å–Ω—ã—Ö –º–µ—Å—Ç. üò¥

–ü–æ—Å–º–æ—Ç—Ä–∏–º,üßë‚Äçüíª —á—Ç–æ —É –º–µ–Ω—è –¥–ª—è –í–∞—Å –µ—Å—Ç—å?""")
    user_data[message.chat.id] = {}
    bot.register_next_step_handler(message, ask_city)


def ask_city(message):
    user_data[message.chat.id]['city'] = message.text
    ask_start_date(message)


def ask_start_date(message):
    calendar, step = DetailedTelegramCalendar(min_date=datetime.date.today(), locale='ru').build()
    bot.send_message(message.chat.id, f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∑–∞–µ–∑–¥–∞:", reply_markup=calendar)


@bot.callback_query_handler(func=DetailedTelegramCalendar.func())
def handle_start_date(c):
    result, key, step = DetailedTelegramCalendar(min_date=datetime.date.today(), locale='ru').process(c.data)
    if not result and key:
        bot.edit_message_text(f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É {LSTEP[step]}",
                              c.message.chat.id,
                              c.message.message_id,
                              reply_markup=key)
    elif result:
        if user_data[c.message.chat.id].get('start_date') is None:
            user_data[c.message.chat.id]['start_date'] = result.strftime('%Y-%m-%d')
            bot.edit_message_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–∞—Ç—É –∑–∞–µ–∑–¥–∞: {user_data[c.message.chat.id]['start_date']}.\n"
                                  f"–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –≤—ã–µ–∑–¥–∞:",
                                  c.message.chat.id,
                                  c.message.message_id)
            ask_end_date(c)
        else:
            end_date = result.strftime('%Y-%m-%d')
            start_date = user_data[c.message.chat.id].get('start_date')
            if end_date <= start_date:
                bot.send_message(c.message.chat.id,
                                 "–î–∞—Ç–∞ –≤—ã–µ–∑–¥–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–∞ –¥–∞—Ç–µ –∑–∞–µ–∑–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –¥–∞—Ç—É.")
                ask_end_date(c)
            else:
                user_data[c.message.chat.id]['end_date'] = end_date
                bot.edit_message_text(
                    f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–∞—Ç—ã:\n–ó–∞–µ–∑–¥: {user_data[c.message.chat.id]['start_date']}\n–í—ã–µ–∑–¥: {user_data[c.message.chat.id]['end_date']}.",
                    c.message.chat.id,
                    c.message.message_id)
                bot.send_message(c.message.chat.id, "–°–∫–æ–ª—å–∫–æ –≥–æ—Å—Ç–µ–π?")
                bot.register_next_step_handler(c.message, ask_guest)


def ask_end_date(c):
    start_date = datetime.datetime.strptime(user_data[c.message.chat.id]['start_date'], '%Y-%m-%d').date()
    calendar, step = DetailedTelegramCalendar(min_date=start_date + datetime.timedelta(days=1), locale='ru').build()
    bot.send_message(c.message.chat.id, f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –≤—ã–µ–∑–¥–∞:", reply_markup=calendar)


def ask_guest(message):
    if message.text.isdigit():
        user_data[message.chat.id]['guest'] = int(message.text)
        bot.send_message(message.chat.id, "–°–∫–æ–ª—å–∫–æ —Ä–∞–∑–¥–µ–ª—å–Ω—ã—Ö —Å–ø–∞–ª—å–Ω—ã—Ö –º–µ—Å—Ç –≤–∞–º –Ω—É–∂–Ω–æ?")
        bot.register_next_step_handler(message, ask_bedrooms)
    else:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
        bot.register_next_step_handler(message, ask_guest)


def ask_bedrooms(message):
    user_data[message.chat.id]['bedrooms'] = message.text
    bot.send_message(message.chat.id, "–°–ø–∞—Å–∏–±–æ! –í–æ—Ç –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:")
    bot.send_message(message.chat.id, f"–ì–æ—Ä–æ–¥: {user_data[message.chat.id]['city']}\n"
                                      f"–î–∞—Ç—ã: {user_data[message.chat.id]['start_date']} - {user_data[message.chat.id]['end_date']}\n"
                                      f"–°–∫–æ–ª—å–∫–æ –≥–æ—Å—Ç–µ–π: {user_data[message.chat.id]['guest']}\n"
                                      f"–°–ø–∞–ª—å–Ω—ã—Ö –º–µ—Å—Ç: {user_data[message.chat.id]['bedrooms']}")
    chat_id = message.chat.id
    city = user_data[chat_id]['city']
    start_date = user_data[chat_id]['start_date']
    end_date = user_data[chat_id]['end_date']
    guest_count = user_data[chat_id]['guest']
    bedrooms = user_data[chat_id]['bedrooms']

    offers = find_offers(city, start_date, end_date, guest_count, bedrooms)

    if offers:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        for offer in offers:
            bot.send_message(chat_id,
                             f"–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ: {offer.description}\n–¶–µ–Ω–∞: {offer.price.value} {offer.price.currency}")
    else:
        bot.send_message(chat_id, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É.")


if __name__ == "__main__":
    bot.polling()

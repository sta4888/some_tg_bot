import telebot
from connect import session
from models import User, Offer, XML_FEED
from dotenv import load_dotenv
import os
import requests  # –î–æ–±–∞–≤–∏–º –±–∏–±–ª–∏–æ—Ç–µ–∫—É –¥–ª—è HTTP-–∑–∞–ø—Ä–æ—Å–æ–≤
from service import parse_and_save_offer

load_dotenv()

API_TOKEN = os.environ.get('BOT_TOKEN')
bot = telebot.TeleBot(API_TOKEN)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start —Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ–º –¥–ª—è —Ö–æ—Å—Ç–∞
@bot.message_handler(commands=['start'])
def send_welcome(message):
    bot.send_message(message, "–ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞.")

    # –ù–∞–π–¥–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ —Å–æ–∑–¥–∞–¥–∏–º –Ω–æ–≤–æ–≥–æ
    user = session.query(User).filter_by(telegram_id=message.from_user.id).first()

    if user is None:
        user = User(
            telegram_id=message.from_user.id,
            username=message.from_user.username,
            chat_id=message.chat.id,
            is_client=False  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–µ —Ö–æ—Å—Ç
        )
        session.add(user)
        session.commit()

    if user.is_client:
        bot.send_message(message, "–ü—Ä–∏–≤–µ—Ç! –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.")
    else:
        bot.send_message(message, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, —Ö–æ—Å—Ç! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ XML-—Ñ–∞–π–ª.")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ URL
    user_states[message.from_user.id] = {'url_input': True}


@bot.message_handler(func=lambda message: 'https://realtycalendar.ru/xml_feed' in message.text)
def handle_url_input(message):
    user = session.query(User).filter_by(telegram_id=message.from_user.id).first()
    url = message.text.strip()

    if not user:
        bot.reply_to(message, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å XML-—Ñ–∞–π–ª
        response = requests.get(url)
        response.raise_for_status()
        xml_data = response.content.decode('utf-8')

        # –ó–¥–µ—Å—å –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø–∞—Ä—Å–∏–Ω–≥ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
        internal_ids = parse_and_save_offer(xml_data, bot, message)

        if internal_ids:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –≤ —Ç–∞–±–ª–∏—Ü–µ XML_FEED
            new_feed = XML_FEED(url=url, user_id=user.id)
            session.add(new_feed)
            session.commit()

            bot.send_message(message.chat.id, f'—Å–ø–∞—Å–∏–±–æ! üëå\n–î–æ–±–∞–≤–ª–µ–Ω–æ –æ–±—ä–µ–∫—Ç–æ–≤: {len(internal_ids)}')
            user_states[message.from_user.id]['internal_ids'] = internal_ids
            user_states[message.from_user.id]['current_index'] = 0
            bot.reply_to(message, f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ URL –¥–ª—è –æ–±—ä–µ–∫—Ç–∞ —Å internal_id: {internal_ids[0]}")
        else:
            bot.reply_to(message, "–í –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–º —Ñ–∞–π–ª–µ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ –Ω–æ–≤–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞.")

    except Exception as e:
        session.rollback()  # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –æ—Ç–∫–∞—Ç—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        bot.reply_to(message, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: {str(e)}.")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –≤–≤–æ–¥–∞ URL
@bot.message_handler(func=lambda message: message.text.startswith(
    "https://realtycalendar.ru/apart") and not message.from_user.id in user_states)
def request_url(message):
    user_states[message.from_user.id] = {'url_input': True}
    bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ XML-—Ñ–∞–π–ª.")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∑–∞–ø—Ä–æ—Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
@bot.message_handler(
    func=lambda message: message.from_user.id in user_states and 'update_existing' in user_states[message.from_user.id])
def handle_update_confirmation(message):
    user_id = message.from_user.id
    user_state = user_states[user_id]

    if message.text.strip().lower() == '–¥–∞':
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö internal_id
        internal_ids = user_state['internal_ids']
        current_index = user_state['current_index']
        internal_id = internal_ids[current_index]
        offer = session.query(Offer).filter_by(internal_id=internal_id).first()

        if offer and offer.created_by == user_id:
            # –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
            session.commit()
            bot.reply_to(message, f"–î–∞–Ω–Ω—ã–µ –¥–ª—è internal_id {internal_id} –æ–±–Ω–æ–≤–ª–µ–Ω—ã.")

            # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É internal_id
            current_index += 1
            user_state['current_index'] = current_index

            if current_index < len(internal_ids):
                next_internal_id = internal_ids[current_index]
                bot.reply_to(message,
                             f"–û–±–Ω–æ–≤–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è internal_id: {next_internal_id}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π URL.")
            else:
                del user_states[user_id]  # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
                bot.reply_to(message, "–í—Å–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.")
        else:
            bot.reply_to(message, f"–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å internal_id {internal_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞–º.")
    else:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Ö–æ—á–µ—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å, –ø—Ä–æ—Å—Ç–æ —É–¥–∞–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        del user_states[user_id]
        bot.reply_to(message, "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ—Ç–º–µ–Ω–µ–Ω–æ.")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –≤–≤–æ–¥–∞ URL
@bot.message_handler(func=lambda message: message.from_user.id in user_states and 'update_existing' not in user_states[
    message.from_user.id])
def handle_url_input(message):
    user_id = message.from_user.id
    user_state = user_states[user_id]

    url_to = message.text.strip()
    internal_ids = user_state['internal_ids']
    current_index = user_state['current_index']

    internal_id = internal_ids[current_index]
    offer = session.query(Offer).filter_by(internal_id=internal_id).first()

    if offer:
        offer.url_to = url_to
        session.commit()
        bot.reply_to(message, f"–°—Å—ã–ª–∫–∞ –¥–ª—è internal_id {internal_id} –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞: {url_to}")

        current_index += 1
        user_state['current_index'] = current_index

        if current_index < len(internal_ids):
            next_internal_id = internal_ids[current_index]
            bot.reply_to(message, f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ URL –¥–ª—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å internal_id: {next_internal_id}")
        else:
            del user_states[user_id]
            bot.reply_to(message, "–í—Å–µ —Å—Å—ã–ª–∫–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.")
    else:
        bot.reply_to(message, f"–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å internal_id {internal_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")


if __name__ == "__main__":
    bot.polling()

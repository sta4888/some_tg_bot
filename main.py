import asyncio
import datetime
import re
import os
import sys

import httpx
import telebot
from sqlalchemy import distinct
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton, InputMediaPhoto
from telegram_bot_calendar import DetailedTelegramCalendar, LSTEP
from dotenv import load_dotenv
from loguru import logger

from connect import session, Session
from models import Location, Offer, User, Subscription
from resender import resend_message
from service import find_offers, parse_ical, random_with_N_digits, suggest_city, cities, cities_true

load_dotenv()


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logger.remove()  # –£–¥–∞–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
logger.add(sys.stdout, format="{time} {level} {message}", level="INFO")  # –õ–æ–≥–∏ –≤ –∫–æ–Ω—Å–æ–ª—å
logger.add("file.log", format="{time} {level} {message}", level="DEBUG", rotation="10 MB")  # –õ–æ–≥–∏ –≤ —Ñ–∞–π–ª


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
API_TOKEN = os.environ.get('BOT_TOKEN')
bot = telebot.TeleBot(API_TOKEN)

user_data = {}

from telebot import types

# –£–¥–æ–±—Å—Ç–≤–∞ —Å —ç–º–æ–¥–∑–∏
AMENITIES_EMOJI = {
    "–°—Ç–∏—Ä–∞–ª—å–Ω–∞—è –º–∞—à–∏–Ω–∞": "üß∫",
    "Wi-Fi": "üì∂",
    "–¢–µ–ª–µ–≤–∏–∑–æ—Ä": "üì∫",
    "–ö–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä": "‚ùÑÔ∏è",
    "–î—Ä—É–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ –¥–ª—è –¥–µ—Ç–µ–π": "üë∂",
    "–†–∞–∑—Ä–µ—à–µ–Ω—ã –≤–µ—á–µ—Ä–∏–Ω–∫–∏": "üéâ",
    "–•–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫": "üßä",
    "–¢–µ–ª–µ—Ñ–æ–Ω": "üìû",
    "–ü–ª–∏—Ç–∞": "üç≥",
    "–ü–æ—Å—É–¥–æ–º–æ–µ—á–Ω–∞—è –º–∞—à–∏–Ω–∞": "üçΩÔ∏è",
    "–ú—É–∑—ã–∫–∞–ª—å–Ω—ã–π —Ü–µ–Ω—Ç—Ä": "üéµ",
    "–ú–∏–∫—Ä–æ–≤–æ–ª–Ω–æ–≤–∫–∞": "üç≤",
    "–£—Ç—é–≥": "üßº",
    "–ö–æ–Ω—Å—å–µ—Ä–∂": "üë®‚Äç‚úàÔ∏è",
    "–ü–∞—Ä–∫–æ–≤–∫–∞": "üöó",
    "–°–µ–π—Ñ": "üîí",
    "–í–æ–¥–æ–Ω–∞–≥—Ä–µ–≤–∞—Ç–µ–ª—å": "üíß",
    "–¢–µ–ª–µ–≤–∏–¥–µ–Ω–∏–µ": "üì°",
    "–í–∞–Ω–Ω–∞—è –∫–æ–º–Ω–∞—Ç–∞": "üõÅ",
    "–ú–æ–∂–Ω–æ —Å –∂–∏–≤–æ—Ç–Ω—ã–º–∏": "üêï",
    "–ú–æ–∂–Ω–æ –∫—É—Ä–∏—Ç—å": "üö¨",
    "–†–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∞—è –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞": "üíñ",
    "–î–∂–∞–∫—É–∑–∏": "üõÄ",
    "–ë–∞–ª–∫–æ–Ω": "üèûÔ∏è",
    "–õ–∏—Ñ—Ç": "üõó"
}


@bot.message_handler(commands=['start'])
def start(message):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.username} ({message.from_user.id}) –æ—Ç–ø—Ä–∞–≤–∏–ª –∫–æ–º–∞–Ω–¥—É /start")
    user = session.query(User).filter_by(telegram_id=message.from_user.id).first()

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–æ–≤—ã–π, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ
    if user is None:
        user = User(
            telegram_id=message.from_user.id,
            username=message.from_user.username,
            chat_id=message.chat.id,
            is_client=True,  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–µ —Ö–æ—Å—Ç
        )

        session.add(user)
        session.commit()

    bot.send_message(message.chat.id, """–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! üëã–≠—Ç–æ –í–ì–û–°–¢–ò–±–æ—Ç. 
            –Ø –Ω–∞–π–¥—É –¥–ª—è –í–∞—Å –∫–≤–∞—Ä—Ç–∏—Ä—É –∏–ª–∏ –∞–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç—ã. üè†            
            –ù–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –≥–æ—Ä–æ–¥, ‚úàÔ∏è–¥–∞—Ç—ã –∑–∞–µ–∑–¥–∞ –∏ –≤—ã–µ–∑–¥–∞üöò,  –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Å—Ç–µ–πüõçüõçüõç –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑–¥–µ–ª—å–Ω—ã—Ö —Å–ø–∞–ª—å–Ω—ã—Ö –º–µ—Å—Ç. üò¥            
            –ü–æ—Å–º–æ—Ç—Ä–∏–º,üßë‚Äçüíª —á—Ç–æ —É –º–µ–Ω—è –¥–ª—è –í–∞—Å –µ—Å—Ç—å?""")
    user_data[message.chat.id] = {}
    bot.register_next_step_handler(message, ask_city)


def ask_city(message):
    msg = str(message.text).lower()
    suggestions = suggest_city(msg)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞
    if msg in cities:
        index = cities.index(msg)
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ cities_true
        corresponding_value = cities_true[index]
        user_data[message.chat.id]['city'] = corresponding_value
        ask_start_date(message)
    else:
        # –ï—Å–ª–∏ –≥–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏
        if suggestions:
            # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º InlineKeyboardMarkup
            markup = types.InlineKeyboardMarkup()
            for suggestion in suggestions:
                index = cities.index(suggestion)
                # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ cities_true
                corresponding_value = cities_true[index]
                # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ–±—ã —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ suggestion —è–≤–ª—è–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–æ–π
                if isinstance(corresponding_value, str):
                    # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å –∫ callback_data
                    markup.add(
                        types.InlineKeyboardButton(corresponding_value, callback_data=f"city_{corresponding_value}"))

            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏
            bot.send_message(message.chat.id, "–í–æ–∑–º–æ–∂–Ω–æ, –≤—ã –∏–º–µ–ª–∏ –≤ –≤–∏–¥—É:", reply_markup=markup)
        else:
            bot.send_message(message.chat.id,
                             "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ –Ω–∞—à—ë–ª –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
            bot.register_next_step_handler(message, ask_city)


@bot.callback_query_handler(func=lambda call: call.data.startswith('city_'))
def handle_city_selection(call):
    # –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å 'city_' –∏–∑ callback_data
    selected_city = call.data.replace('city_', '')

    # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≥–æ—Ä–æ–¥ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Å–ø–∏—Å–∫–µ
    if selected_city in cities_true:
        user_data[call.message.chat.id]['city'] = selected_city

        # –ò–∑–º–µ–Ω—è–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –≥–æ—Ä–æ–¥–µ
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –≥–æ—Ä–æ–¥: {selected_city}. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∑–∞–µ–∑–¥–∞.",
            reply_markup=None  # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞
        )

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –¥–∞—Ç—ã
        ask_start_date(call.message)
    else:
        bot.send_message(call.message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.")
        bot.register_next_step_handler(call.message, ask_city)


def ask_start_date(message):
    calendar, step = DetailedTelegramCalendar(min_date=datetime.date.today(), locale='ru').build()
    bot.send_message(message.chat.id, f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∑–∞–µ–∑–¥–∞:", reply_markup=calendar)


@bot.callback_query_handler(func=DetailedTelegramCalendar.func())
def handle_start_date(c):
    chat_id = c.message.chat.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ª–æ–≤–∞—Ä–µ
    if chat_id not in user_data:
        user_data[chat_id] = {}

    result, key, step = DetailedTelegramCalendar(min_date=datetime.date.today(), locale='ru').process(c.data)
    if not result and key:
        bot.edit_message_text(f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É {LSTEP[step]}",
                              c.message.chat.id,
                              c.message.message_id,
                              reply_markup=key)
    elif result:
        if user_data[c.message.chat.id].get('start_date') is None:
            user_data[c.message.chat.id]['start_date'] = result.strftime('%Y-%m-%d')
            bot.edit_message_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–∞—Ç—É –∑–∞–µ–∑–¥–∞: {user_data[c.message.chat.id]['start_date']}.\n"
                                  f"–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –≤—ã–µ–∑–¥–∞:",
                                  c.message.chat.id,
                                  c.message.message_id)
            ask_end_date(c)
        else:
            end_date = result.strftime('%Y-%m-%d')
            start_date = user_data[c.message.chat.id].get('start_date')
            if end_date <= start_date:
                bot.send_message(c.message.chat.id,
                                 "–î–∞—Ç–∞ –≤—ã–µ–∑–¥–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–∞ –¥–∞—Ç–µ –∑–∞–µ–∑–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –¥–∞—Ç—É.")
                ask_end_date(c)
            else:
                user_data[c.message.chat.id]['end_date'] = end_date
                bot.edit_message_text(
                    f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–∞—Ç—ã:\n–ó–∞–µ–∑–¥: {user_data[c.message.chat.id]['start_date']}\n–í—ã–µ–∑–¥: {user_data[c.message.chat.id]['end_date']}.",
                    c.message.chat.id,
                    c.message.message_id)
                bot.send_message(c.message.chat.id, "–°–∫–æ–ª—å–∫–æ –≥–æ—Å—Ç–µ–π?")
                bot.register_next_step_handler(c.message, ask_guest)


def ask_end_date(c):
    start_date = datetime.datetime.strptime(user_data[c.message.chat.id]['start_date'], '%Y-%m-%d').date()
    calendar, step = DetailedTelegramCalendar(min_date=start_date + datetime.timedelta(days=1), locale='ru').build()
    bot.send_message(c.message.chat.id, f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –≤—ã–µ–∑–¥–∞:", reply_markup=calendar)


def ask_guest(message):
    if message.text.isdigit():
        user_data[message.chat.id]['guest'] = int(message.text)
        bot.send_message(message.chat.id, "–°–∫–æ–ª—å–∫–æ —Ä–∞–∑–¥–µ–ª—å–Ω—ã—Ö —Å–ø–∞–ª—å–Ω—ã—Ö –º–µ—Å—Ç –≤–∞–º –Ω—É–∂–Ω–æ?")

        # –ü–æ–ª—É—á–µ–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ–ª—è 'sleeps' –∏–∑ —Ç–∞–±–ª–∏—Ü—ã Offer
        unique_sleeps = session.query(distinct(Offer.sleeps)).all()
        unique_sleeps = [sleep[0] for sleep in unique_sleeps if sleep[0]]  # –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º None

        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ 'sleeps'
        markup = InlineKeyboardMarkup(row_width=2)
        for sleep in unique_sleeps:
            markup.add(InlineKeyboardButton(sleep, callback_data=sleep))

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑–¥–µ–ª—å–Ω—ã—Ö —Å–ø–∞–ª—å–Ω—ã—Ö –º–µ—Å—Ç:", reply_markup=markup)
    else:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
        bot.register_next_step_handler(message, ask_guest)


@bot.callback_query_handler(func=lambda call: re.match(r'^\d+(\+\d+)*$', call.data))
def handle_bedrooms_selection(call):
    chat_id = call.message.chat.id

    if chat_id not in user_data:
        user_data[chat_id] = {}

    bedrooms = call.data
    user_data[chat_id]['bedrooms'] = bedrooms

    bot.edit_message_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {bedrooms} —Ä–∞–∑–¥–µ–ª—å–Ω—ã—Ö —Å–ø–∞–ª—å–Ω—ã—Ö –º–µ—Å—Ç.",
                          chat_id,
                          call.message.message_id)

    bot.send_message(chat_id, "–°–ø–∞—Å–∏–±–æ! –í–æ—Ç –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:")
    bot.send_message(chat_id, f"–ì–æ—Ä–æ–¥: {user_data[chat_id].get('city', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
                              f"–î–∞—Ç—ã: {user_data[chat_id].get('start_date', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')} - {user_data[chat_id].get('end_date', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
                              f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Å—Ç–µ–π: {user_data[chat_id].get('guest', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
                              f"–°–ø–∞–ª—å–Ω—ã—Ö –º–µ—Å—Ç: {user_data[chat_id].get('bedrooms', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}")

    city = user_data[chat_id].get('city')
    start_date = user_data[chat_id].get('start_date')
    end_date = user_data[chat_id].get('end_date')
    guest_count = user_data[chat_id].get('guest')

    if city and start_date and end_date and guest_count:
        amenities = ['wi_fi', 'air_conditioner']

        offers = find_offers(city, start_date, end_date, guest_count, bedrooms, amenities)

        if offers:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –≤ user_data
            user_data[chat_id]['offers'] = offers
            user_data[chat_id]['current_offer_index'] = 0
            send_offer_message(chat_id)
        else:
            bot.send_message(chat_id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–µ –¥–∞—Ç—ã.")
    else:
        bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ.")


# –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
async def check_url(client, url):
    try:
        response = await client.get(url)
        return response.status_code >= 200 and response.status_code < 300
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ URL {url}: {e}")
        return False


async def check_media_links(urls):
    valid_urls = []
    async with httpx.AsyncClient() as client:
        tasks = [check_url(client, url) for url in urls]
        results = await asyncio.gather(*tasks)
        logger.info(f"--results {results}")
        valid_urls = [url for url, is_valid in zip(urls, results) if is_valid]
    return valid_urls


################################################################################################
# –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º message_id
def send_offer_message(chat_id):
    current_offer_index = user_data[chat_id]['current_offer_index']
    offers = user_data[chat_id]['offers']
    offer = offers[current_offer_index]

    main_photo = next((photo.url for photo in offer.photos if photo.is_main),
                      offer.photos[0].url if offer.photos else None)

    amenities_dict = {
        "–°—Ç–∏—Ä–∞–ª—å–Ω–∞—è –º–∞—à–∏–Ω–∞": offer.washing_machine,
        "Wi-Fi": offer.wi_fi,
        "–¢–µ–ª–µ–≤–∏–∑–æ—Ä": offer.tv,
        "–ö–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä": offer.air_conditioner,
        "–î—Ä—É–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ –¥–ª—è –¥–µ—Ç–µ–π": offer.kids_friendly,
        "–†–∞–∑—Ä–µ—à–µ–Ω—ã –≤–µ—á–µ—Ä–∏–Ω–∫–∏": offer.party,
        "–•–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫": offer.refrigerator,
        "–¢–µ–ª–µ—Ñ–æ–Ω": offer.phone,
        "–ü–ª–∏—Ç–∞": offer.stove,
        "–ü–æ—Å—É–¥–æ–º–æ–µ—á–Ω–∞—è –º–∞—à–∏–Ω–∞": offer.dishwasher,
        "–ú—É–∑—ã–∫–∞–ª—å–Ω—ã–π —Ü–µ–Ω—Ç—Ä": offer.music_center,
        "–ú–∏–∫—Ä–æ–≤–æ–ª–Ω–æ–≤–∫–∞": offer.microwave,
        "–£—Ç—é–≥": offer.iron,
        "–ö–æ–Ω—Å—å–µ—Ä–∂": offer.concierge,
        "–ü–∞—Ä–∫–æ–≤–∫–∞": offer.parking,
        "–°–µ–π—Ñ": offer.safe,
        "–í–æ–¥–æ–Ω–∞–≥—Ä–µ–≤–∞—Ç–µ–ª—å": offer.water_heater,
        "–¢–µ–ª–µ–≤–∏–¥–µ–Ω–∏–µ": offer.television,
        "–í–∞–Ω–Ω–∞—è –∫–æ–º–Ω–∞—Ç–∞": offer.bathroom,
        "–ú–æ–∂–Ω–æ —Å –∂–∏–≤–æ—Ç–Ω—ã–º–∏": offer.pet_friendly,
        "–ú–æ–∂–Ω–æ –∫—É—Ä–∏—Ç—å": offer.smoke,
        "–†–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∞—è –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞": offer.romantic,
        "–î–∂–∞–∫—É–∑–∏": offer.jacuzzi,
        "–ë–∞–ª–∫–æ–Ω": offer.balcony,
        "–õ–∏—Ñ—Ç": offer.elevator
    }

    amenities = [f"{AMENITIES_EMOJI.get(name)} {name}" for name, condition in amenities_dict.items() if condition]
    amenities_str = ", \n".join(amenities)

    total_offers = len(offers)
    current_offer_number = current_offer_index + 1  # –ù–æ–º–µ—Ä –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è (1-–∏–Ω–¥–µ–∫—Å–∞—Ü–∏—è)

    offer_message = f"–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ: \n" \
                    f"{offer.location.region}, {offer.location.locality_name}\n" \
                    f"–ê–¥—Ä–µ—Å: {offer.location.address}\n" \
                    f"–¶–µ–Ω–∞: {offer.price.value} {offer.price.currency}\n\n" \
                    f"–£–¥–æ–±—Å—Ç–≤–∞: {amenities_str}\n\n" \
                    f"–î–µ–ø–æ–∑–∏—Ç: {offer.price.deposit} {offer.price.deposit_currency}\n\n" \
                    f"–ù–∞–π–¥–µ–Ω–æ {total_offers} | {current_offer_number}"

    markup = types.InlineKeyboardMarkup()
    next_button = types.InlineKeyboardButton("–î–∞–ª–µ–µ", callback_data="next_offer")
    back_button = types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="previous_offer")
    details_button = types.InlineKeyboardButton("–ü–æ–¥—Ä–æ–±–Ω–µ–µ", callback_data="offer_details")

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è —Å–≤—è–∑–∏ —Å —Ö–æ—Å—Ç–æ–º —Å —Å—Å—ã–ª–∫–æ–π
    contact_host_button = types.InlineKeyboardButton("–°–≤—è–∑—å —Å —Ö–æ—Å—Ç–æ–º", callback_data="contact_host")

    markup.add(back_button, next_button, details_button)
    markup.add(contact_host_button)

    if main_photo:
        try:
            message = bot.send_photo(chat_id, main_photo, caption=offer_message, reply_markup=markup)
        except telebot.apihelper.ApiTelegramException as tg_exception:
            logger.error(f"--tg_exception {tg_exception}")
            message = bot.send_message(chat_id, offer_message, reply_markup=markup)
    else:
        message = bot.send_message(chat_id, offer_message, reply_markup=markup)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º message_id –≤ user_data
    user_data[chat_id]['message_id'] = message.message_id


@bot.callback_query_handler(func=lambda call: call.data == 'contact_host')
def contact_host(call):
    chat_id = call.message.chat.id
    current_offer_index = user_data[chat_id]['current_offer_index']
    offer = user_data[chat_id]['offers'][current_offer_index]

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–∑–¥–∞–ª –æ—Ñ—Ñ–µ—Ä
    host = session.query(User).get(offer.created_by)

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ telegram_id
    user = session.query(User).filter_by(telegram_id=call.from_user.id).first()

    markup = types.InlineKeyboardMarkup()

    # –ï—Å–ª–∏ —É —Ö–æ—Å—Ç–∞ –µ—Å—Ç—å username –≤ Telegram, —Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
    if host.username:
        host_chat_link = f"tg://resolve?domain={host.username}"
    else:
        # –ò–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º chat_id –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –ª–∏—á–Ω—ã–π —á–∞—Ç
        host_chat_link = f"tg://user?id={host.telegram_id}"

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è —Å–≤—è–∑–∏ —Å —Ö–æ—Å—Ç–æ–º —Å —Å—Å—ã–ª–∫–æ–π
    contact_host_button = types.InlineKeyboardButton("–ß–∞—Ç —Å —Ö–æ—Å—Ç–æ–º üí¨", url=host_chat_link)
    markup.add(contact_host_button)

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ request_id
    request_id = None
    while True:
        request_id = random_with_N_digits(8)
        subscription = session.query(Subscription).filter_by(unique_digits_id=str(request_id)).first()
        if not subscription:  # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–æ–¥–ø–∏—Å–∫–∞ —Å —ç—Ç–∏–º ID –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            break

    new_subscription = Subscription(
        user_id=user.id,  # –ü–µ—Ä–µ–¥–∞–µ–º user.id, –∞ –Ω–µ –æ–±—ä–µ–∫—Ç user
        start_date=user_data[chat_id].get('start_date', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'),
        end_date=user_data[chat_id].get('end_date', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'),
        offer_id=offer.id,
        unique_digits_id=request_id
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å —Å—Å—ã–ª–∫–æ–π –Ω–∞ —á–∞—Ç —Å —Ö–æ—Å—Ç–æ–º
    bot.send_message(chat_id, f"–í–∞—à–∞ –∑–∞—è–≤–∫–∞: `{request_id}`", reply_markup=markup, parse_mode='MarkdownV2')

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ö–æ—Å—Ç—É —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Ñ—Ñ–µ—Ä–æ–º
    offer_message = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç—Å—è –≤–∞—à–∏–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º: \n" \
                    f"–£ –≤–∞—Å –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {'@' + call.from_user.username if call.from_user.username else call.from_user.first_name}\n" \
                    f"–î–∞—Ç—ã: {user_data[chat_id].get('start_date', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')} - {user_data[chat_id].get('end_date', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n" \
                    f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Å—Ç–µ–π: {user_data[chat_id].get('guest', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n" \
                    f"ID –ó–∞—è–≤–∫–∏: `{request_id}`\n" \
                    f"{offer.location.region}, {offer.location.locality_name}\n" \
                    f"–ê–¥—Ä–µ—Å: {offer.location.address}\n" \
                    f"–¶–µ–Ω–∞: {offer.price.value} {offer.price.currency}\n\n"

    resend_message(bot, call.message, host.chat_id, offer_message)

    # –î–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É –≤ —Å–µ—Å—Å–∏—é
    session.add(new_subscription)

    # –ó–∞—Ñ–∏–∫—Å–∏—Ä—É–π—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
    session.commit()

    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data.pop(chat_id, None)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
@bot.callback_query_handler(func=lambda call: call.data == "previous_offer")
def handle_previous_offer(call):
    chat_id = call.message.chat.id
    current_offer_index = user_data[chat_id]['current_offer_index']

    if current_offer_index - 1 >= 0:
        user_data[chat_id]['current_offer_index'] -= 1
        send_offer_message(chat_id)
        bot.delete_message(chat_id, call.message.message_id)  # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    else:
        bot.send_message(chat_id, "–≠—Ç–æ –±—ã–ª–æ –ø–µ—Ä–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–î–∞–ª–µ–µ"
@bot.callback_query_handler(func=lambda call: call.data == "next_offer")
def handle_next_offer(call):
    chat_id = call.message.chat.id
    current_offer_index = user_data[chat_id]['current_offer_index']

    if current_offer_index + 1 < len(user_data[chat_id]['offers']):
        user_data[chat_id]['current_offer_index'] += 1
        send_offer_message(chat_id)
        bot.delete_message(chat_id, call.message.message_id)  # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    else:
        bot.send_message(chat_id, "–≠—Ç–æ –±—ã–ª–æ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü–æ–¥—Ä–æ–±–Ω–µ–µ"
@bot.callback_query_handler(func=lambda call: call.data == "offer_details")
def handle_offer_details(call):
    chat_id = call.message.chat.id
    current_offer_index = user_data[chat_id]['current_offer_index']
    offer = user_data[chat_id]['offers'][current_offer_index]

    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º
    bot.delete_message(chat_id, call.message.message_id)

    # 1. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—É —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏
    media_group = []
    urls_to_check = [photo.url for photo in offer.photos if str(photo.url).startswith('http')]
    valid_urls = asyncio.run(check_media_links(urls_to_check))

    for url in valid_urls[:10]:
        media_group.append(InputMediaPhoto(media=url))

    if media_group:
        media_messages = bot.send_media_group(chat_id, media_group)
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏–π —Å –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞–º–∏
        user_data[chat_id]['last_media_messages'] = [msg.message_id for msg in media_messages]

    # 2. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É–¥–æ–±—Å—Ç–≤–∞–º–∏
    amenities_dict = {
        "–°—Ç–∏—Ä–∞–ª—å–Ω–∞—è –º–∞—à–∏–Ω–∞": offer.washing_machine,
        "Wi-Fi": offer.wi_fi,
        "–¢–µ–ª–µ–≤–∏–∑–æ—Ä": offer.tv,
        "–ö–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä": offer.air_conditioner,
        "–î—Ä—É–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ –¥–ª—è –¥–µ—Ç–µ–π": offer.kids_friendly,
        "–†–∞–∑—Ä–µ—à–µ–Ω—ã –≤–µ—á–µ—Ä–∏–Ω–∫–∏": offer.party,
        "–•–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫": offer.refrigerator,
        "–¢–µ–ª–µ—Ñ–æ–Ω": offer.phone,
        "–ü–ª–∏—Ç–∞": offer.stove,
        "–ü–æ—Å—É–¥–æ–º–æ–µ—á–Ω–∞—è –º–∞—à–∏–Ω–∞": offer.dishwasher,
        "–ú—É–∑—ã–∫–∞–ª—å–Ω—ã–π —Ü–µ–Ω—Ç—Ä": offer.music_center,
        "–ú–∏–∫—Ä–æ–≤–æ–ª–Ω–æ–≤–∫–∞": offer.microwave,
        "–£—Ç—é–≥": offer.iron,
        "–ö–æ–Ω—Å—å–µ—Ä–∂": offer.concierge,
        "–ü–∞—Ä–∫–æ–≤–∫–∞": offer.parking,
        "–°–µ–π—Ñ": offer.safe,
        "–í–æ–¥–æ–Ω–∞–≥—Ä–µ–≤–∞—Ç–µ–ª—å": offer.water_heater,
        "–¢–µ–ª–µ–≤–∏–¥–µ–Ω–∏–µ": offer.television,
        "–í–∞–Ω–Ω–∞—è –∫–æ–º–Ω–∞—Ç–∞": offer.bathroom,
        "–ú–æ–∂–Ω–æ —Å –∂–∏–≤–æ—Ç–Ω—ã–º–∏": offer.pet_friendly,
        "–ú–æ–∂–Ω–æ –∫—É—Ä–∏—Ç—å": offer.smoke,
        "–†–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∞—è –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞": offer.romantic,
        "–î–∂–∞–∫—É–∑–∏": offer.jacuzzi,
        "–ë–∞–ª–∫–æ–Ω": offer.balcony,
        "–õ–∏—Ñ—Ç": offer.elevator
    }

    amenities = [f"{AMENITIES_EMOJI.get(name)} {name}" for name, condition in amenities_dict.items() if condition]
    amenities_str = ", ".join(amenities)

    # 3. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º
    description_message = f"–û–ø–∏—Å–∞–Ω–∏–µ: {offer.description}"
    description_msg = bot.send_message(chat_id, description_message)

    # 4. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ª–æ–∫–∞—Ü–∏–µ–π
    location_message = f"–õ–æ–∫–∞—Ü–∏—è: {offer.location.region}, {offer.location.locality_name}\n–ê–¥—Ä–µ—Å: {offer.location.address}"

    amenities_message = f"–£–¥–æ–±—Å—Ç–≤–∞: {amenities_str}\n {location_message}"
    amenities_msg = bot.send_message(chat_id, amenities_message)
    location_msg = bot.send_location(chat_id, offer.location.latitude, offer.location.longitude)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
    user_data[chat_id]['last_details_messages'] = [
        amenities_msg.message_id,
        description_msg.message_id,
        location_msg.message_id
    ]

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É
    markup = types.InlineKeyboardMarkup()
    return_button = types.InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É", callback_data="back_to_offers")
    markup.add(return_button)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    buttons_message = bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)
    user_data[chat_id]['last_buttons_message'] = buttons_message.message_id


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É"
@bot.callback_query_handler(func=lambda call: call.data == "back_to_offers")
def handle_back_to_offers(call):
    chat_id = call.message.chat.id

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    bot.delete_message(chat_id, user_data[chat_id]['last_buttons_message'])

    # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞–º–∏
    for msg_id in user_data[chat_id]['last_media_messages']:
        bot.delete_message(chat_id, msg_id)

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å —É–¥–æ–±—Å—Ç–≤–∞–º–∏, –æ–ø–∏—Å–∞–Ω–∏–µ–º –∏ –ª–æ–∫–∞—Ü–∏–µ–π
    for msg_id in user_data[chat_id]['last_details_messages']:
        bot.delete_message(chat_id, msg_id)

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
    send_offer_message(chat_id)


################################################################################################
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É"
@bot.callback_query_handler(func=lambda call: call.data == "back_to_offers")
def handle_back_to_offers(call):
    chat_id = call.message.chat.id
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É —Ç–µ–∫—É—â–µ–≥–æ –æ—Ñ—Ñ–µ—Ä–∞
    send_offer_message(chat_id)
    bot.delete_message(chat_id, call.message.message_id)  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç—è–º–∏


def check_calendars():
    session = Session()
    offers = session.query(Offer).all()
    for offer in offers:
        if offer.url_to.startswith("http"):
            # –õ–æ–≥–∏–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π –∫–∞–ª–µ–Ω–¥–∞—Ä—è url_to
            parse_ical(offer.url_to, offer,
                       session)  # fixme –µ—Å–ª–∏ –º—ã –∏ —Ç–∞–∫ –ø–µ—Ä–µ–¥–∞–µ–º –æ–±—ä–µ–∫—Ç Offer —Ç–æ –∑–∞—á–µ–º –º—ã –æ—Ç–¥–µ–ª—å–Ω–æ –æ—Ç–¥–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä—å –æ—Ñ–µ—Ä–∞?
        else:
            continue
    session.close()


# qr_generate("example.com", "guest.pdf")


if __name__ == '__main__':
    with logger.catch():
        check_calendars()
        bot.infinity_polling()
